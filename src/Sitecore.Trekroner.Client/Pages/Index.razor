@page "/"
@implements IDisposable
@inject ContainerOperations.ContainerOperationsClient ContainerOperationsClient

@if (listContainersResponse == null)
{
    <p><em>Loading...</em></p>
} else
{
    <h1>@listContainersResponse.ProjectName</h1>

    <table class="table table-striped">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Id</th>
                <th scope="col">Service</th>
                <th scope="col">Image</th>
                <th scope="col">State</th>
                <th scope="col">Status</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var container in listContainersResponse.Containers)
            {
                <tr>
                    <td title="@container.Id"><a href="/status/@container.ComposeService">@container.Id.Substring(0, 12)</a></td>
                    <td>@container.ComposeService</td>
                    <td>@container.Image</td>
                    <td>@container.State</td>
                    <td>@container.Status</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private ListContainersResponse listContainersResponse;
    private System.Threading.Timer timer;

    private async Task RefreshContainers()
    {
        listContainersResponse = await ContainerOperationsClient.ListContainersAsync(new ListContainersRequest());
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await RefreshContainers();

        timer = new System.Threading.Timer(async (stateInfo) =>
        {
            await RefreshContainers();
            StateHasChanged();
        }, new System.Threading.AutoResetEvent(false), 1000, 1000);
    }

    public void Dispose()
    {
        timer.Dispose();
    }
}